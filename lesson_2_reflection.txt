What happens when you initialize a repository? Why do you need to do it?
	Set up to begin tracking the files. To be able to begin using commits.	

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	Staging area allows you to start setting up a commit. Working directory is where
	you make changes to then send them to the staging area. Repository keeps track of 
	all your commits. It offers flexibility and trust to make sure of what you commit.

How can you use the staging area to make sure you have one commit per logical
change?
	Use git diff to check what changes are being done from the working directory and the staging area.
	Then use git diff --staged to see the changes from the Staging area and the repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Branches are helpful to experiment with the code or add possible features without messing
	the original code.

How do the diagrams help you visualize the branch structure?
	Diagrams allows the coder to not get lost while making new commits or branches. Also 
	to not create unreachable commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	The result is a complete code with the features on each branch. We represent them in a diagram
	because it is easier to follow the branch that way and not get lost in the commits you made.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Git can save time by merging but it can be annoying when little things like a extra space is found.
	Merging manually all the time would take longer depending on how big the project is.